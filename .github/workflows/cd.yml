name: CI and Release

on:
  push:
    branches:
      - main
    tags: ["v*"]
  pull_request: ~

env:
  CARGO_TERM_COLOR: always

jobs:
  clippy:
    name: clippy
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy

      - uses: Swatinem/rust-cache@v2

      - uses: giraffate/clippy-action@v1
        with:
          reporter: "github-pr-review"
          github_token: ${{ secrets.GITHUB_TOKEN }}

  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  tests:
    name: tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v2

      - name: Run tests
        run: cargo test

  conformance:
    name: conformance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v2

      - name: Build
        run: cargo build

      - name: Start cluster
        run: ./target/debug/disty -c fixtures/etc/disty/1-node.yaml > registry.log &
        env:
          ENC_KEY_ACTIVE: 828W10qknpOT
          ENC_KEYS: 828W10qknpOT/CIneMTth3mnRZZq0PMtztfWrnU+5xeiS0jrTB8iq6xc=

      #- name: Wait for service to be ready
      #  run: |
      #    echo "Waiting for service to be ready at http://localhost:8080/v2/..."
      #    for i in {1..30}; do
      #      status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/v2/)
      #      if [ "$status" -eq 200 ]; then
      #        echo "Service is ready!"
      #        exit 0
      #      fi
      #      echo "Not ready yet (HTTP $status), retrying in 2s..."
      #      sleep 2
      #    done
      #    echo "Service did not become ready in time"
      #    exit 1

      - name: Run OCI Distribution Spec conformance tests
        uses: opencontainers/distribution-spec@v1.1.1
        env:
          OCI_ROOT_URL: http://localhost:9999
          OCI_NAMESPACE: mytestorg/mytestrepo
          OCI_USERNAME: bob
          OCI_PASSWORD: badmin
          OCI_TEST_PULL: 1
          OCI_TEST_PUSH: 1
          OCI_TEST_CONTENT_DISCOVERY: 1
          OCI_TEST_CONTENT_MANAGEMENT: 1
          OCI_HIDE_SKIPPED_WORKFLOWS: 0
          OCI_DEBUG: 1
          OCI_DELETE_MANIFEST_BEFORE_BLOBS: 1

      - name: registry.log
        run: cat registry.log
        if: always()

  release:
    runs-on: ubuntu-latest
    needs:
      - clippy
      - rustfmt
      - tests
      - conformance
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
      - uses: cycjimmy/semantic-release-action@v4
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
            @semantic-release/github
            @semantic-release/commit-analyzer
            @semantic-release/release-notes-generator
            conventional-changelog-conventionalcommits
            @semantic-release/exec
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    needs:
    - tests
    - conformance
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into ghcri.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/unrouted/disty
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  upload-binaries:
    runs-on: ubuntu-latest
    needs:
    - tests
    - conformance
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v2

      - name: Build release binary
        run: cargo build --release

      - name: Upload binary
        uses: softprops/action-gh-release@v2
        with:
          files: target/release/disty
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
